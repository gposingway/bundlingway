name: Build and Deploy Release

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: windows-latest
    outputs:
      version: ${{ steps.find_version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Find and Extract Version
        id: find_version
        run: |
          $version = "0.0.2.4" # Replace with your actual version finding logic if needed
          echo "version=$version" >> $env:GITHUB_OUTPUT
          echo "VERSION=$version" >> $env:GITHUB_ENV

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore Bundlingway.sln

      - name: Build
        run: dotnet build Bundlingway.sln --configuration Release --no-restore

      - name: Publish
        run: dotnet publish Bundlingway.sln --configuration Release --no-restore --output publish

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Bundlingway-app
          path: publish

  release:
    runs-on: windows-latest
    needs: build
    environment:
      name: Release
      url: https://github.com/gposingway/bundlingway/releases/tag/v${{ needs.build.outputs.version }}
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          name: Bundlingway-app
          path: publish

      - name: Find and Extract Version
        id: extract_version
        run: |
          echo "VERSION=${{ needs.build.outputs.version }}" >> $env:GITHUB_ENV
          echo "EXE_FILE=D:\a\bundlingway\bundlingway\publish\Bundlingway.exe" >> $env:GITHUB_ENV # Adjust if necessary
          echo "EXE_NAME=Bundlingway" >> $env:GITHUB_ENV # Adjust if necessary
          echo "AUTHOR_NAME=Leon Aquitaine" >> $env:GITHUB_ENV # Adjust if necessary
          echo "AUTHOR_EMAIL=leonaquitaine@gmail.com" >> $env:GITHUB_ENV # Adjust if necessary
          echo "ZIP_FILE=Bundlingway.${{ needs.build.outputs.version }}.zip" >> $env:GITHUB_ENV

      - name: Create Release ZIP Archive
        shell: pwsh
        run: |
           Compress-Archive -Path "publish/*" -DestinationPath "${{ env.ZIP_FILE }}"

      - name: Scan with VirusTotal
        run: |
          $apiKey = "${{ secrets.VIRUSTOTAL_API_KEY }}"
          $assetUrl = "https://github.com/gposingway/bundlingway/releases/download/v${{ env.VERSION }}/Bundlingway.${{ env.VERSION }}.zip" # URL to scan
          $apiUrl = "https://www.virustotal.com/api/v3/urls"
          $analysisReportUrlBase = "https://www.virustotal.com/api/v3/analyses/"
          $maxRetries = 10 # Maximum retries for polling
          $retryDelaySeconds = 5 # Delay between retries

          Write-Host "Scanning URL $($assetUrl) with VirusTotal..."
          Write-Host "VirusTotal API URL: $($apiUrl)"
          Write-Host "Asset URL: $($assetUrl)"

          # URL Scan Request
          $headers = @{
            "accept" = "application/json"
            "x-apikey" = $apiKey
            "Content-Type" = "application/x-www-form-urlencoded"
          }
          $body = "url=$($assetUrl)"
          try {
            $response = Invoke-RestMethod -Uri $apiUrl -Method Post -Headers $headers -Body $body -ContentType "application/x-www-form-urlencoded"
            $analysisId = $response.data.id
            Write-Host "URL submitted for analysis. Analysis ID: $($analysisId)"
          } catch {
            Write-Error "Error submitting URL to VirusTotal: $_"
            throw
          }

          # Poll for analysis completion
          $retryCount = 0
          $analysisStatus = "queued" # Initial status
          while ($retryCount -lt $maxRetries -and $analysisStatus -ne "completed") {
            Start-Sleep -Seconds $retryDelaySeconds
            $retryCount++
            Write-Host "Polling VirusTotal for analysis status... Retry $($retryCount) of $($maxRetries)"

            $reportUrl = "$($analysisReportUrlBase)$analysisId"
            Write-Host "Report URL for polling: $($reportUrl)" # Debug: Report URL
            try {
              $reportResponse = Invoke-RestMethod -Uri $reportUrl -Headers @{"x-apikey" = $apiKey} -Method Get
              Write-Host "Full Report Response: $($reportResponse | ConvertTo-Json -Depth 10)" # Debug: Full API Response
              $analysisStatus = $reportResponse.data.attributes.status
              Write-Host "Analysis status: $($analysisStatus)"
              if ($analysisStatus -eq "completed") {
                $apiLink = $reportResponse.data.links.item
                # Replace '/api/v3/urls/' with '/gui/url/' to get the GUI URL
                $reportPermalink = $apiLink -replace '/api/v3/urls/', '/gui/url/'
                echo "VIRUSTOTAL_REPORT_URL=$reportPermalink" >> $env:GITHUB_ENV
                Write-Host "VirusTotal report URL (GUI): $($reportPermalink)"
                Write-Host "Final VirusTotal Report URL: $($reportPermalink)" # Debug: Permalink
                break # Exit loop if completed
              }
            } catch {
              Write-Warning "Error retrieving VirusTotal report during polling: $_"
              # Continue polling on error, as transient network issues might occur
            }
          }

          if ($analysisStatus -ne "completed") {
            Write-Warning "VirusTotal analysis polling timed out or did not complete successfully after $($maxRetries) retries."
            echo "VIRUSTOTAL_REPORT_URL=Error retrieving report or timeout" >> $env:GITHUB_ENV # Set a placeholder in case of timeout
          }

          Write-Host "Environment variable VIRUSTOTAL_REPORT_URL after Scan: ${{ env.VIRUSTOTAL_REPORT_URL }}" # Debug: Check env var

      - name: Force Delete Existing Tag
        shell: bash
        run: |
          TAG_NAME="v${{ env.VERSION }}"
          echo "Attempting to force-delete tag: $TAG_NAME"
          gh tag delete --force "$TAG_NAME" || true # Ignore error if tag doesn't exist

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.VERSION }}
          release_name: Bundlingway v${{ env.VERSION }}
          body_path: release-notes.md
          draft: false
          prerelease: false
          files: |
            Bundlingway.*.zip
            publish/Bundlingway.exe
            publish/Bundlingway.dll
            publish/Bundlingway.deps.json
            publish/Bundlingway.runtimeconfig.json

      - name: Output VirusTotal Report URL
        shell: pwsh
        run: |
          Write-Host "VirusTotal Report URL: ${{ env.VIRUSTOTAL_REPORT_URL }}"
