name: Build and Deploy Release

on:
  push:
    branches:
      - main

permissions:
  contents: write
  issues: write
  pull-requests: write
  actions: write
  checks: write
  deployments: write

jobs:
  build:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~\AppData\Local\NuGet\Cache # Path to NuGet local cache for Windows
          key: nuget-packages-${{ runner.os }}-${{ hashFiles('**/packages.lock.json', '**/project.assets.json') }}
          restore-keys: |
            nuget-packages-${{ runner.os }}-

      - uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - run: dotnet restore # Removed --runtime win-x64 from dotnet restore
      - run: dotnet build --configuration Release --no-restore
      - run: dotnet publish --configuration Release --no-build --output ./publish --no-self-contained # Added --no-self-contained flag
      - name: List publish directory contents
        shell: pwsh
        run: Get-ChildItem -Path ./publish -Recurse # Listing publish directory
      - uses: actions/upload-artifact@v4
        with:
          name: build
          path: ./publish # Path for artifact upload is now ./publish

  release:
    needs: build
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/download-artifact@v4
        with:
          name: build
          path: ./publish # Path for download-artifact is now ./publish

      - name: Find and Extract Version
        id: extract_version
        shell: pwsh
        run: |
          $exe_file = Get-ChildItem -Path "./publish" -Filter *.exe | Select-Object -First 1 # Path is now ./publish
          $file_info = Get-Item $exe_file.FullName
          $version = $file_info.VersionInfo.FileVersion
          $exe_name = $exe_file.BaseName
          echo "VERSION=$version" >> $env:GITHUB_ENV
          echo "EXE_FILE=$($exe_file.FullName)" >> $env:GITHUB_ENV
          echo "EXE_NAME=$exe_name" >> $env:GITHUB_ENV
          echo "VERSION=$version"
          echo "EXE_FILE=$($exe_file.FullName)"
          echo "EXE_NAME=$exe_name"

      - name: Extract Commit Details
        id: extract_commit
        run: |
          author_name=$(git log -1 --pretty=format:'%an')
          author_email=$(git log -1 --pretty=format:'%ae')
          echo "AUTHOR_NAME=$author_name" >> $GITHUB_ENV
          echo "AUTHOR_EMAIL=$author_email" >> $GITHUB_ENV
          echo "AUTHOR_NAME=$author_name"
          echo "AUTHOR_EMAIL=$author_email"
        shell: bash

      - name: Configure Git User
        run: |
          git config --global user.email "${{ env.AUTHOR_EMAIL }}"
          git config --global user.name "${{ env.AUTHOR_NAME }}"

      - name: Delete Existing Release
        id: delete_existing_release
        continue-on-error: true # If delete fails, continue workflow
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        run: |
          $tag_name = "v${{ env.VERSION }}"
          Write-Host "Checking for existing release: Release $tag_name"
          $existing_release = gh release list --repo="$GITHUB_REPOSITORY" --limit 100 | Where-Object { $_ -match "Release $tag_name" }
          if ($existing_release) {
            Write-Host "Release 'Release $tag_name' exists. Deleting release..."
            gh release delete "$tag_name" --yes --repo="$GITHUB_REPOSITORY"
            Write-Host "Release 'Release $tag_name' deleted."
          } else {
            Write-Host "Release 'Release $tag_name' does not exist."
          }
        shell: pwsh

      - name: Create and Push Tag
        id: create_tag
        run: |
          $TAG_NAME="v${{ env.VERSION }}"
          if (git ls-remote --tags origin "$TAG_NAME") {
            echo "Tag $TAG_NAME already exists remotely. Skipping tag creation and push."
          } else {
            echo "Tag $TAG_NAME does not exist remotely. Creating and pushing tag."
            git tag -a "$TAG_NAME" -m "Release $TAG_NAME"
            git push origin "$TAG_NAME"
          }
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}

      - name: Create zip file
        id: create_zip
        shell: pwsh
        run: |
          $zip_file = "${{ env.EXE_NAME }}.${{ env.VERSION }}.zip"
          Compress-Archive -Path "./publish/$env:EXE_NAME.exe" -DestinationPath $zip_file # Path is now ./publish
          echo "ZIP_FILE=$zip_file" >> $env:GITHUB_ENV


      - name: Scan with VirusTotal
        run: |
          $apiKey = "${{ secrets.VIRUSTOTAL_API_KEY }}"
          $assetUrl = "https://github.com/gposingway/bundlingway/releases/download/v${{ env.VERSION }}/Bundlingway.${{ env.VERSION }}.zip" # URL to scan
          $apiUrl = "https://www.virustotal.com/api/v3/urls"
          $analysisReportUrlBase = "https://www.virustotal.com/api/v3/analyses/"
          $maxRetries = 10 # Maximum retries for polling
          $retryDelaySeconds = 5 # Delay between retries

          Write-Host "Scanning URL $($assetUrl) with VirusTotal..."
          Write-Host "VirusTotal API URL: $($apiUrl)"
          Write-Host "Asset URL: $($assetUrl)"

          # URL Scan Request
          $headers = @{
            "accept" = "application/json"
            "x-apikey" = $apiKey
            "Content-Type" = "application/x-www-form-urlencoded"
          }
          $body = "url=$($assetUrl)"
          try {
            $response = Invoke-RestMethod -Uri $apiUrl -Method Post -Headers $headers -Body $body -ContentType "application/x-www-form-urlencoded"
            $analysisId = $response.data.id
            Write-Host "URL submitted for analysis. Analysis ID: $($analysisId)"
          } catch {
            Write-Error "Error submitting URL to VirusTotal: $_"
            throw
          }

          # Poll for analysis completion
          $retryCount = 0
          $analysisStatus = "queued" # Initial status
          while ($retryCount -lt $maxRetries -and $analysisStatus -ne "completed") {
            Start-Sleep -Seconds $retryDelaySeconds
            $retryCount++
            Write-Host "Polling VirusTotal for analysis status... Retry $($retryCount) of $($maxRetries)"

            $reportUrl = "$($analysisReportUrlBase)$analysisId"
            Write-Host "Report URL for polling: $($reportUrl)" # Debug: Report URL
            try {
              $reportResponse = Invoke-RestMethod -Uri $reportUrl -Headers @{"x-apikey" = $apiKey} -Method Get
              $analysisStatus = $reportResponse.data.attributes.status
              Write-Host "Analysis status: $($analysisStatus)"
              if ($analysisStatus -eq "completed") {
                # Try using the 'item' link as the report URL
                $reportPermalink = $reportResponse.data.links.item
                $guiReportPermalink = $reportPermalink -replace '/api/v3/urls/', '/gui/url/' # Replace URL part
                echo "VIRUSTOTAL_REPORT_URL=$guiReportPermalink" >> $env:GITHUB_ENV # Use the modified URL
                Write-Host "VirusTotal report URL (using item link): $($guiReportPermalink)" # Use the modified URL
                Write-Host "Final VirusTotal Report URL: $($guiReportPermalink)" # Debug: Permalink - Use the modified URL
                Write-Host "Links object: $($reportResponse.data.links | ConvertTo-Json -Depth 10)" # Debug: Output the links object to console
                break # Exit loop if completed
              }
            } catch {
              Write-Warning "Error retrieving VirusTotal report during polling: $_"
              # Continue polling on error, as transient network issues might occur
            }
          }

          if ($analysisStatus -ne "completed") {
            Write-Warning "VirusTotal analysis polling timed out or did not complete successfully after $($maxRetries) retries."
            echo "VIRUSTOTAL_REPORT_URL=Error retrieving report or timeout" >> $env:GITHUB_ENV # Set a placeholder in case of timeout
          }

          Write-Host "Environment variable VIRUSTOTAL_REPORT_URL after Scan: ${{ env.VIRUSTOTAL_REPORT_URL }}" # Debug: Check env var



      - name: Read Release Template
        id: read_template
        shell: pwsh
        run: |
          $template_content = Get-Content -Path "./md/release-template.md" -Raw
          Write-Host "Template Content before replacement: $($template_content)" # Debug: Template Content
          $release_body = $template_content -replace '%VIRUSTOTAL_LINK%', "${{ env.VIRUSTOTAL_REPORT_URL }}"
          Write-Host "Release Body after replacement: $($release_body)" # Debug: Release Body
          echo "RELEASE_BODY<<EOF" >> $env:GITHUB_ENV
          echo "$release_body" >> $env:GITHUB_ENV
          echo "EOF" >> $env:GITHUB_ENV

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        with:
          tag_name: "v${{ env.VERSION }}"
          release_name: Release v${{ env.VERSION }}
          body: ${{ env.RELEASE_BODY }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "${{ env.ZIP_FILE }}"
          asset_name: "${{ env.ZIP_FILE }}"
          asset_content_type: application/zip
